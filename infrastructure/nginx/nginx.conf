# Define upstream servers for APIs
upstream zenbreeder {
    server 127.0.0.1:3000;  # Assuming Zenbreeder runs on port 3000
}

upstream zentank {
    server 127.0.0.1:4000;  # Assuming Zentank runs on port 4000
}

upstream zenlexicon {
    server 127.0.0.1:5000;  # Assuming Zenlexicon runs on port 5000
}

# Configuration for dev stage
server {
    listen 80;
    server_name dev.terrazen.com;

    location / {
        proxy_pass http://localhost:8080;  # Assuming your frontend runs on port 8080
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/zenbreeder {
        proxy_pass http://zenbreeder;
    }

    location /api/zentank {
        proxy_pass http://zentank;
    }

    location /api/zenlexicon {
        proxy_pass http://zenlexicon;
    }
}

# Configuration for test stage
server {
    listen 80;
    server_name test.terrazen.com;

    location / {
        proxy_pass http://localhost:8080;  # Assuming your frontend runs on port 8080
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/zenbreeder {
        proxy_pass http://zenbreeder;
    }

    location /api/zentank {
        proxy_pass http://zentank;
    }

    location /api/zenlexicon {
        proxy_pass http://zenlexicon;
    }
}

# Configuration for prod stage
server {
    listen 80;
    server_name prod.terrazen.com;

    location / {
        proxy_pass http://localhost:8080;  # Assuming your frontend runs on port 8080
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/zenbreeder {
        proxy_pass http://zenbreeder;
    }

    location /api/zentank {
        proxy_pass http://zentank;
    }

    location /api/zenlexicon {
        proxy_pass http://zenlexicon;
    }
}

# Redirect HTTP to HTTPS
server {
    listen 80;
    server_name dev.terrazen.com test.terrazen.com prod.terrazen.com;

    location / {
        return 301 https://$host$request_uri;
    }
}

# Configuration for SSL/TLS
server {
    listen 443 ssl http2;
    server_name dev.terrazen.com test.terrazen.com prod.terrazen.com;

    ssl_certificate /etc/letsencrypt/live/dev.terrazen.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/dev.terrazen.com/privkey.pem;

    # SSL configurations (adjust according to your security needs)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';

    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;

    # Error pages
    error_page 400 /400.html;
    error_page 401 /401.html;
    error_page 403 /403.html;
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }

    location / {
        proxy_pass http://localhost:8080;  # Assuming your frontend runs on port 8080
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # API proxy configurations
    location /api/zenbreeder {
        proxy_pass http://zenbreeder;
    }

    location /api/zentank {
        proxy_pass http://zentank;
    }

    location /api/zenlexicon {
        proxy_pass http://zenlexicon;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    limit_req zone=api_limit burst=20;

    # Access control
    # Example: allow access only from specific IP addresses
    # allow 192.168.1.0/24;
    # deny all;
}